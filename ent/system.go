// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/carenaggio/hermes/ent/system"
	"github.com/google/uuid"
)

// System is the model entity for the System schema.
type System struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// SystemID holds the value of the "system_id" field.
	SystemID uuid.UUID `json:"system_id,omitempty"`
	// PublicKey holds the value of the "public_key" field.
	PublicKey []byte `json:"public_key,omitempty"`
	// Approved holds the value of the "approved" field.
	Approved bool `json:"approved,omitempty"`
	// LastLogin holds the value of the "last_login" field.
	LastLogin    int64 `json:"last_login,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*System) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case system.FieldPublicKey:
			values[i] = new([]byte)
		case system.FieldApproved:
			values[i] = new(sql.NullBool)
		case system.FieldID, system.FieldLastLogin:
			values[i] = new(sql.NullInt64)
		case system.FieldSystemID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the System fields.
func (s *System) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case system.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case system.FieldSystemID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field system_id", values[i])
			} else if value != nil {
				s.SystemID = *value
			}
		case system.FieldPublicKey:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field public_key", values[i])
			} else if value != nil {
				s.PublicKey = *value
			}
		case system.FieldApproved:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field approved", values[i])
			} else if value.Valid {
				s.Approved = value.Bool
			}
		case system.FieldLastLogin:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field last_login", values[i])
			} else if value.Valid {
				s.LastLogin = value.Int64
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the System.
// This includes values selected through modifiers, order, etc.
func (s *System) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// Update returns a builder for updating this System.
// Note that you need to call System.Unwrap() before calling this method if this System
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *System) Update() *SystemUpdateOne {
	return NewSystemClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the System entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *System) Unwrap() *System {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: System is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *System) String() string {
	var builder strings.Builder
	builder.WriteString("System(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("system_id=")
	builder.WriteString(fmt.Sprintf("%v", s.SystemID))
	builder.WriteString(", ")
	builder.WriteString("public_key=")
	builder.WriteString(fmt.Sprintf("%v", s.PublicKey))
	builder.WriteString(", ")
	builder.WriteString("approved=")
	builder.WriteString(fmt.Sprintf("%v", s.Approved))
	builder.WriteString(", ")
	builder.WriteString("last_login=")
	builder.WriteString(fmt.Sprintf("%v", s.LastLogin))
	builder.WriteByte(')')
	return builder.String()
}

// Systems is a parsable slice of System.
type Systems []*System
